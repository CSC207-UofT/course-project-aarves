package com.aarves.bluepages.usecase.data.review;

import com.aarves.bluepages.usecase.interactors.review.ReviewRepository;
import com.aarves.bluepages.entities.Review;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Class for accessing review data through review entities and a collection-like interface by the repository pattern.
 * Implemented using a review data source adapter and used by the review use case interactors.
 */
public class ReviewRepositoryImpl implements ReviewRepository {
    private final ReviewDAO reviewDAO;

    /**
     * Constructs review repository with review data source adapter dependency.
     * @param reviewDAO the review data source adapter dependency
     */
    public ReviewRepositoryImpl(ReviewDAO reviewDAO){
        this.reviewDAO = reviewDAO;
    }

    /**
     * Adds review to data source using the data source adapter dependency.
     * @param review the review entity to be added
     * @return the added review, along with its autogenerated ID
     */
    @Override
    public Review addReview(Review review) {
        // Adds review to data source
        ReviewDTO reviewData = ReviewDataMapper.mapToDTO(review);
        int reviewId = this.reviewDAO.addReviewData(reviewData);

        // Creates new review with given ID
        return ReviewDataMapper.mapToReview(reviewData, reviewId);
    }

    /**
     * Deletes review from data source using the data source adapter dependency.
     * @param review the review entity to be deleted
     */
    @Override
    public void deleteReview(Review review) {
        this.reviewDAO.deleteReviewData(review.getReviewId());
    }

    /**
     * Retrieves review entity with given ID using the data source adapter dependency.
     * @param reviewId the ID of the review to be retrieved
     * @return the retrieved review entity
     */
    @Override
    public Review getReview(int reviewId) {
        // Gets review data from ID
        ReviewDTO reviewData = this.reviewDAO.getReviewData(reviewId);

        // Converts to review entity if exists
        if(reviewData != null) {
            return ReviewDataMapper.mapToReview(reviewData, reviewId);
        }
        else {
            return null;
        }
    }

    /**
     * Retrieves all review entities for a given user using the data source adapter dependency.
     * @param username the username of the user
     * @return a list of review entities made by the user
     */
    @Override
    public List<Review> getReviewsByUser(String username) {
        Map<Integer, ReviewDTO> reviewDataMap = this.reviewDAO.getReviewDataByUser(username);
        return this.mapToList(reviewDataMap);
    }

    /**
     * Retrieves all review entities for a given location using the data source adapter dependency.
     * @param locationId the ID of the location
     * @return a list of review entities for the location
     */
    @Override
    public List<Review> getReviewsByLocation(int locationId) {
        Map<Integer, ReviewDTO> reviewDataMap = this.reviewDAO.getReviewDataByLocation(locationId);
        return this.mapToList(reviewDataMap);
    }

    /**
     * Converts map of review IDs and review data transfer objects to a list of review entities.
     * @param reviewMap the map of review IDs to review data transfer objects
     * @return a list of review entities from the map
     */
    private List<Review> mapToList(Map<Integer, ReviewDTO> reviewMap) {
        List<Review> reviews = new ArrayList<>();
        for (int reviewId : reviewMap.keySet()) {
            // Converts each into review entity
            Review review = ReviewDataMapper.mapToReview(reviewMap.get(reviewId), reviewId);
            reviews.add(review);
        }

        return reviews;
    }
}
