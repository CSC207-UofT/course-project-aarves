package com.aarves.bluepages.database;

import com.aarves.bluepages.database.access.ReviewDatabaseDAO;
import com.aarves.bluepages.database.models.ReviewDataEntity;
import com.aarves.bluepages.database.models.ReviewDatabaseMapper;
import com.aarves.bluepages.usecase.data.review.ReviewDAO;
import com.aarves.bluepages.usecase.data.review.ReviewDTO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Adapter between the review data access objects implemented by Room and the review data access object used by
 * the data access in the use cases layer.
 */
public class ReviewDAOAdapter implements ReviewDAO {
    private final ReviewDatabaseDAO reviewDatabaseDAO;

    /**
     * Constructs a review adapter with the Room reviews data access dependency.
     * @param reviewDatabaseDAO the Room data access object for the reviews table
     */
    public ReviewDAOAdapter(ReviewDatabaseDAO reviewDatabaseDAO) {
        this.reviewDatabaseDAO = reviewDatabaseDAO;
    }

    /**
     * Adds a new review to the database using the Room data access dependency.
     * @param review the review data to be added
     * @return the autogenerated ID of the added review
     */
    @Override
    public int addReviewData(ReviewDTO review) {
        // Converts review data transfer object to Room data entity
        ReviewDataEntity reviewDataEntity = ReviewDatabaseMapper.mapToDataEntity(review);
        return (int) reviewDatabaseDAO.insert(reviewDataEntity);
    }

    /**
     * Deletes review from database using the Room data access dependency.
     * @param reviewId the ID of the review to be deleted
     */
    @Override
    public void deleteReviewData(int reviewId) {
        // Retrieves review data entity given ID and deletes it
        ReviewDataEntity reviewDataEntity = this.reviewDatabaseDAO.getByID(reviewId);
        this.reviewDatabaseDAO.delete(reviewDataEntity);
    }

    /**
     * Retrieves the data of the review with given ID using the Room data access dependency.
     * @param reviewId the ID of the review to be retrieved
     * @return the data of the review with given ID, or null if review does not exist
     */
    @Override
    public ReviewDTO getReviewData(int reviewId) {
        ReviewDataEntity reviewDataEntity = this.reviewDatabaseDAO.getByID(reviewId);

        // Converts data entity into data transfer object if not null
        if(reviewDataEntity != null) {
            return ReviewDatabaseMapper.mapToDTO(reviewDataEntity);
        }
        else {
            return null;
        }
    }

    /**
     * Reviews data for all reviews for account with given username using the Room data access dependency.
     * @param username the username of the account with reviews to be retrieved
     * @return a mapping of review IDs to review data
     */
    @Override
    public Map<Integer, ReviewDTO> getReviewDataByUser(String username) {
        // Retrieves list of review data entities for username
        Map<Integer, ReviewDTO> reviewMap = new HashMap<>();
        List<ReviewDataEntity> reviews = this.reviewDatabaseDAO.getByUser(username);

        // Converts each review data entity to data transfer object and places into map
        for(ReviewDataEntity reviewDataEntity : reviews) {
            ReviewDTO reviewDTO = ReviewDatabaseMapper.mapToDTO(reviewDataEntity);
            reviewMap.put(reviewDataEntity.reviewId, reviewDTO);
        }

        return reviewMap;
    }

    /**
     * Reviews data for all reviews for location with given ID using the Room data access dependency.
     * @param locationId the ID of the location with reviews to be retrieved
     * @return a mapping of review IDs to review data
     */
    @Override
    public Map<Integer, ReviewDTO> getReviewDataByLocation(int locationId) {
        // Retrieves list of review data entities for location ID
        Map<Integer, ReviewDTO> reviewMap = new HashMap<>();
        List<ReviewDataEntity> reviews = this.reviewDatabaseDAO.getByLocation(locationId);

        // Converts each review data entity to data transfer object and places into map
        for(ReviewDataEntity reviewDataEntity : reviews) {
            ReviewDTO reviewDTO = ReviewDatabaseMapper.mapToDTO(reviewDataEntity);
            reviewMap.put(reviewDataEntity.reviewId, reviewDTO);
        }

        return reviewMap;
    }
}
